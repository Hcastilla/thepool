{"version":3,"file":"3.server.js","sources":["webpack:///./src/services/publicacion.service.ts"],"sourcesContent":["import AjaxService from './Ajax.service';\r\nimport { AddPublicationsAction } from './../store/actions/publication.action';\r\nimport store from './../store/root.store';\r\n\r\nlet _publicationService : PublicationService;\r\n\r\n/**\r\n * Servicio que contiene \r\n * todas las interacciones de las publicaciones\r\n */\r\nclass PublicationService {\r\n\r\n\t/**\r\n\t * Url base para las peticiones\r\n\t * @type {String} url\r\n\t */\r\n\tprivate url: String = 'posts/query';\r\n\t\r\n\t/**\r\n  * Siempre retorna una sola instancia, patron singleton.\r\n  */\r\n\tconstructor()\r\n\t{\r\n\t\tif(_publicationService == null)\r\n\t\t{\r\n\t\t\t_publicationService = this;\r\n\t\t}\r\n\t\treturn _publicationService;\r\n\t}\r\n\r\n\t/**\r\n\t * Obtener las publicaciones filtrando por consulta,\r\n\t * ejecuta GetAllPublicationAction\r\n\t * @param {String} query\r\n\t *  \r\n\t */\r\n\tgetPublicationsWithQuery( query: String ) : void\r\n\t{\r\n\t\tAjaxService.post( this.url, { query } ).then( \r\n\t\t\t(result : any) => {\r\n\t\t\t\tif( result.status == 200 )\r\n\t\t\t\t{\r\n\t\t\t\t\tstore.dispatch( AddPublicationsAction( result.data.results ) );\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default new PublicationService();"],"mappings":"AAIA","sourceRoot":""}